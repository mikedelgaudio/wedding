rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /site/{docId} {
      allow get: if request.auth.uid == 'site-guest';
      allow create, update, delete: if false;
    }

    match /rsvp/{inviteCode} {
      // Only allow authenticated users (via site password) to read
      allow get: if request.auth.uid == 'site-guest';

      // Allow update by authenticated user and if valid
      allow update: if
        request.auth.uid == 'site-guest'
        // they can’t change the inviteCode itself
        && request.resource.data.inviteCode == resource.id
        // must be before the RSVP deadline
        && request.time < resource.data.rsvpDeadline
        // payload must validate
        && validateRsvp(request.resource.data);

      allow create, delete: if false;
    }
  }
}

function validateRsvp(data) {
  return (
    // top‐level keys
    data.keys().hasOnly([
      'inviteCode',
      'rsvpDeadline',
      'lastModified',
      'invitee',
      'guests'
    ])
    // inviteCode must stay the same and be a string
    && data.inviteCode is string

    // deadlines & timestamps
    && data.rsvpDeadline is timestamp
    && (data.lastModified is timestamp || data.lastModified == null)

    // invitee sub‐map
    && data.invitee.keys().hasOnly([
         'name',
         'attending',
         'dietaryRestrictions'
       ])
    && data.invitee.name is string
    && data.invitee.name.size() > 0
    && data.invitee.attending is bool
    && (
         data.invitee.dietaryRestrictions == null
         || (
           data.invitee.dietaryRestrictions is string
           && data.invitee.dietaryRestrictions.size() <= 200
         )
       )

    // guests array constraints
    && data.guests is list
  );
}
